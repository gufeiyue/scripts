<?xml version="1.0" encoding="UTF-8"?>

<!--
/**
     * create and delpoy ant scripts
     * usage:  ant
     * <p>Title: </p>
     * <p>Description: </p>
     * <p>Copyright: Copyright (c) 2014</p>
     * <p>Company: AI(NanJing)</p>
     * @author wusk
     * @create date  2014-12-03
     * @version 
     */
-->

<project name="build_integrated" default="usage" basedir=".">

    <description>common基础构建打包</description>
   
    <property environment="env" />
    <property file="buildnv.properties"/>
    <property name="project_name" value="integrated"/>
    <property name="integrated_process_jar_name" value="integrated_process"/>
    <property name="project.common.lib.path" value="${project.dest.dir}/common"/>
    <path id="appenginelib.classpath">
				<fileset dir="${project.appengine.lib.apache}"  includes="*.jar"/>
				<fileset dir="${project.appengine.lib.appengine}"  includes="*.jar"/>
				<fileset dir="${project.appengine.lib.other}"  includes="*.jar"/>
				<fileset dir="${project.appengine.lib.runtime}"  includes="*.jar"/>
				<fileset dir="${project.appengine.lib.webframe}"  includes="*.jar"/>
				<fileset dir="${project.appengine.lib.events}"  includes="*.jar"/>
				<fileset dir="${project.appengine.lib.drools}"  includes="*.jar"/>
				<fileset dir="${project.appengine.lib.jrules}"  includes="*.jar"/>
				<fileset dir="${project.appengine.lib.test}"  includes="*.jar"/>
		</path>
 		
    <target name="init" description="初始化环境">

        <echo message="env init by buildnv.properties ..."/>
        <property name="ant-contrib.jar" location="../ant/lib/ant-contrib-1.0b3.jar" />
        <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.jar}" />
 				
        <echo message="初始化环境完成"/>
    </target>
    
    <target name="clean-ant-create" depends="init" description="清除临时目录">
        <echo message="清除临时目录..."/>

        <mkdir dir="${project.tmp.path}/${project_name}"/>
        <mkdir dir="${project.tmp.path}/${project_name}/pwf"/>
        <mkdir dir="${project.tmp.path}/${project_name}/tmp_pwf"/>
        <mkdir dir="${project.tmp.path}/${project_name}/pwf_code"/>
        <mkdir dir="${project.dest.dir}/${project_name}"/>
        
        <mkdir dir="${project.tmp.path}/${project_name}/ejb-src"/>
        
        <mkdir dir="${project.tmp.path}/${project_name}/pwf_class"/>
        <mkdir dir="${project.tmp.path}/${project_name}/ejb-classes"/>

        <mkdir dir="${project.tmp.path}/${project_name}/ear"/>
        <mkdir dir="${project.tmp.path}/${project_name}/ear/APP-INF"/>
        <mkdir dir="${project.tmp.path}/${project_name}/ear/APP-INF/classes"/>
        <mkdir dir="${project.tmp.path}/${project_name}/ear/APP-INF/lib"/>

        <echo message="清除临时目录完成"/>
    </target>
    
    <target name="copy" depends="clean-ant-create" description="">
    	  <!--loop每个工程，把代码cp到临时目录，这里要用变量替换-->
        <foreach list="businesscommon,integration,customer,marketingcampaign,marketingresource,order,product,productoffering,resourcespecification,crmsaas" target="copyaction" param="projpath" delimiter=",">
        </foreach>
    </target>
     
    <target name="copyaction" description="执行copy动作,目前只拷贝了src和config">
        <copydir src="${project.svn.path}/code/${projpath}/src" dest="${project.tmp.path}/integrated/ejb-src" forceoverwrite="true">
            <include name="**/*SV*.java" />
            <include name="**/*ServiceRemote*.java"/>
        </copydir>
        
    </target>
    
    <target name="compile_flying_code" depends="copy" description="">
    	<javac srcdir="${project.tmp.path}/${project_name}/ejb-src" encoding="utf-8" destdir="${project.tmp.path}/${project_name}/ejb-classes" debug="true" debuglevel="lines,vars,source" nowarn="true">
            <classpath  refid="appenginelib.classpath" />
            <classpath>
                <fileset dir="${project.common.lib.path}" includes="*.jar"/>
                <fileset dir="${project.dest.dir}" includes="**/*.jar"/>
            </classpath>

            <include name="**/*.*"/>
        </javac>
         <jar jarfile="${project.dest.dir}/${project_name}/${project_name}.jar">
            <fileset dir="${project.tmp.path}/${project_name}/ejb-classes">
                <include name="**/*"/>
            </fileset>
        </jar>
        
        
    </target>
    
     <target name="compile_pwf" depends="compile_flying_code" description="执行copy动作,copy tmp/config/下的所有集成域pwf文件">
       
        <copydir src="${project.tmp.path}/config/" dest="${project.tmp.path}/${project_name}/pwf" forceoverwrite="true">
            <include name="**/*Intgrt*.pwf" /><!--只拷贝集成域的东西-->
        </copydir>
        
        <jar jarfile="${project.tmp.path}/${project_name}/tmp_pwf/pwf_src.jar" >
            <fileset dir="${project.tmp.path}/${project_name}/pwf">
                <include name="**/*.pwf"/>
            </fileset>
        </jar>
        
        <taskdef name="PreCreateProcess" classname="com.ai.appframe2.complex.ant.PreCreateProcessTask">
             <classpath  refid="appenginelib.classpath" />
            <classpath>
                <!-- user appframe need aiconfig 等配置-->
                <pathelement path="${project.ant.config.path}/runtime-config/crm_app/crm_app_all/config" />
                <fileset dir="${project.dest.dir}" includes="**/*.jar"/><!--判断这个是否必须,加载所有已经打好包的工程-->
                
                <fileset dir="${project.tmp.path}/${project_name}/tmp_pwf" includes="*.jar"/>
            </classpath>
        </taskdef>

        <PreCreateProcess destPath="${project.tmp.path}/${project_name}/pwf_code"
            processEngineImplClassName="com.ai.comframe.vm.processflow.ProcessEnginePreCompileImpl"
            workflowTemplateClassName="com.ailk.appengine.biz.workflow.template.WorkflowTemplate">
            <fileset dir="${project.tmp.path}/${project_name}/tmp_pwf" />
        </PreCreateProcess>
        
        <javac  srcdir="${project.tmp.path}/${project_name}/pwf_code" encoding="utf-8" destdir="${project.tmp.path}/${project_name}/pwf_class" debug="true" debuglevel="lines,vars,source" nowarn="true" failonerror="false">
             <classpath  refid="appenginelib.classpath" />
            <classpath>
            		<fileset dir="${project.tmp.path}/all_dest_lib" includes="*.jar"/>
                <fileset dir="${project.common.lib.path}" includes="*.jar"/>
                <fileset dir="${project.dest.dir}" includes="**/*.jar"/>
     
            </classpath>

						<!--编译所有pwf文件-->
            <include name="**/*.java"/>
            
        </javac>
        
        <!--打包process.jar-->
        <jar jarfile="${project.dest.dir}/${project_name}/${integrated_process_jar_name}.jar" manifest="${project.tmp.path}/MANIFEST.MF">
            <fileset dir="${project.tmp.path}/${project_name}/pwf_class">
                <include name="**/*.class"/>
            </fileset>
        </jar>
        
    </target>
    
    
     <!-- Step 2 编译flyingsv.jar-->
    <target name="compile_flying_sv"  depends="compile_pwf" description="">
        
        	<taskdef name="EJBGenerator" classname="com.ai.appframe2.complex.ant.EJBGeneratorAntTask">
            <classpath  refid="appenginelib.classpath" />
            <classpath>
            		<pathelement path="${project.ant.config.path}" />   
                <!--强制优先搜索crm_app_all的config的目录下的内容,暂时以base工程下的配置文件为准-->
                <pathelement path="${project.ant.config.path}/runtime-config/crm_app/crm_app_all/config" />  
                <pathelement path="${project.ant.config.path}/runtime-config/crm_app/crm_app_dmsv" />        
                
                <fileset dir="${project.common.lib.path}" includes="*.jar"/><!--引用前边生成的公共服务包-->
                <fileset dir="${project.dest.dir}/${project_name}" includes="*.jar"/>
                
            </classpath>
        </taskdef>
        
         <taskdef name="EJBDoclet" classname="xdoclet.modules.ejb.EjbDocletTask">
	    		 <classpath  refid="appenginelib.classpath" />
	    		 <classpath>
		       			<pathelement path="${project.ant.config.path}" />   
                <pathelement path="${project.ant.config.path}/runtime-config/crm_app/crm_app_all/config" />  
                <fileset dir="${project.ant.staticlib.path}" includes="*.jar"/>
                <fileset dir="${project.weblogic.lib.path}" includes="*.jar"/>
                <fileset dir="${project.dest.dir}/${project_name}" includes="*.jar"/>
	    		</classpath>
      	</taskdef>
      	
      	<taskdef name="CreateManifest" classname="com.ai.appframe2.complex.ant.CreateManifestAntTask">
	    		 <classpath  refid="appenginelib.classpath" />
	    		 <classpath>
                <pathelement path="${project.ant.config.path}/runtime-config/crm_app/crm_app_all/config" />  
                <fileset dir="${project.ant.staticlib.path}" includes="*.jar"/>
                <fileset dir="${project.weblogic.lib.path}" includes="*.jar"/>
                
                 <fileset dir="${project.dest.dir}/${project_name}" includes="*.jar"/>
	    		</classpath>
      	</taskdef>
        
        <!--产生使用SV方式的flying-->
        <EJBGenerator destPath="${project.tmp.path}/${project_name}/ejb-src"   domainSvFile="${project.tmp.path}/domain_info"  vmConfigPath="${project.ant.config.path}" failonerror="false">
            <fileset dir="${project.tmp.path}/${project_name}">
                <include name="**/*SV.class" />
            </fileset>
        </EJBGenerator>
        
        <!--产生使用配置文件方式的flying-->
        <EJBGenerator destPath="${project.tmp.path}/${project_name}/ejb-src"    domainSvFile="${project.tmp.path}/domain_info"  vmConfigPath="${project.ant.config.path}" type="file" failonerror="false">
        </EJBGenerator>
       
        <!--采用搜索jar文件方式生成flying-->
        <EJBGenerator destPath="${project.tmp.path}/${project_name}/ejb-src"   domainSvFile="${project.tmp.path}/domain_info" vmConfigPath="${project.ant.config.path}" type="jar" failonerror="false">
             <fileset dir="${project.appengine.lib.appengine}" includes="*.jar"/>
         
        </EJBGenerator>
        
        <EJBDoclet excludedtags="@version,@author,@todo" force="true" ejbspec="2.0" verbose="true"  destdir="${project.tmp.path}/${project_name}/ejb-desc/META-INF"  >
					<fileset dir="${project.tmp.path}/${project_name}/ejb-src">
						<include name="**/*Service.java" />
					</fileset>

					<deploymentdescriptor acceptAbstractClasses="false" description="crm70 ejb" displayname="crm70 ejb beans"/>
					<weblogic xmlencoding="UTF-8" destdir="${project.tmp.path}/${project_name}/ejb-desc/META-INF" validatexml="true"/>
				</EJBDoclet>
				
				<CreateManifest filename="${project.tmp.path}/${project_name}/ejb-desc/META-INF/MANIFEST.MF" preappend="${project_name}_config.jar">
			      	<fileset dir="${project.appengine.lib.apache}"  includes="*.jar"/>
							<fileset dir="${project.appengine.lib.appengine}"  includes="*.jar"/>
							<fileset dir="${project.appengine.lib.other}"  includes="*.jar"/>
							<fileset dir="${project.appengine.lib.runtime}"  includes="*.jar"/>
							<fileset dir="${project.appengine.lib.webframe}"  includes="*.jar"/>
							<fileset dir="${project.appengine.lib.events}"  includes="*.jar"/>
							<fileset dir="${project.appengine.lib.drools}"  includes="*.jar"/>
							<fileset dir="${project.appengine.lib.jrules}"  includes="*.jar"/>
							<fileset dir="${project.appengine.lib.test}"  includes="*.jar"/>
			      
						 <fileset dir="${project.dest.dir}/${project_name}" includes="*.jar"/>
						 <fileset dir="${project.tmp.path}/all_domain_lib" includes="*.jar"/>
						 <fileset dir="${project.tmp.path}/all_dest_lib">
						 		<include name="*_process.jar"/>
						 </fileset>
						 <fileset dir="${project.dest.dir}/common" includes="*.jar"/>
				</CreateManifest>
				
        <!--编译所有生成的flying.java代码-->
        <javac srcdir="${project.tmp.path}/${project_name}/ejb-src" encoding="utf-8" destdir="${project.tmp.path}/${project_name}/ejb-classes" debug="true" debuglevel="lines,vars,source" nowarn="true">
            <classpath  refid="appenginelib.classpath" />
            <classpath>
                <fileset dir="${project.common.lib.path}" includes="*.jar"/>
                <fileset dir="${project.dest.dir}" includes="**/*.jar"/>
            </classpath>

            <include name="**/*.*"/>
        </javac>
    </target>
    
    <!-- Step 3 生成flying配置文件，服务注册,注意要生成配置文件，必须先生成flying的代码 -->
    <target name="genflyingfile" depends="compile_flying_sv" description="">
   		  
        <jar jarfile="${project.dest.dir}/${project_name}/${project_name}_ejb.jar" manifest="${project.tmp.path}/${project_name}/ejb-desc/META-INF/MANIFEST.MF">
            <fileset dir="${project.tmp.path}/${project_name}/ejb-classes">
                <include name="**/*"/>
            </fileset>
           	<fileset dir="${project.tmp.path}/${project_name}/ejb-desc">
							<include name="META-INF/*.*"/>
						</fileset>
        </jar>
    	
    </target>
        
   
   
    
    <!-- 针对集成域工程达成EAR包 -->
    <target name="compile" depends="genflyingfile" description="domain ear 打包">
    	
    		<copydir src="${project.dest.dir}/${project_name}" dest="${project.tmp.path}/all_dest_lib" forceoverwrite="true">
    	  	<include name="*.jar"/>	
    	  </copydir>
    	
		    <!--使用运行时的配置文件覆盖原有的配置文件-->
		    <!--先使用跨库提交的config覆盖原来的配置文件-->
		    <copydir src="${project.runtime.config}/crm_app/crm_app_all/config" dest="${project.tmp.path}/${project_name}/ejb-config" forceoverwrite="true">
					<include name="**/*.*" />
				</copydir>
		
				<!--用集成域的config文件覆盖-->
		    <copydir src="${project.runtime.config}/crm_app/crm_app_integrated/domain_${project_name}/config" dest="${project.tmp.path}/${project_name}/ejb-config" forceoverwrite="true">
					<include name="**/*.*" />
				</copydir>
				
				<copydir src="${project.tmp.path}/domain_info" dest="${project.tmp.path}/${project_name}/ejb-config/system/service" forceoverwrite="true">
					<include name="*.xml" />
				</copydir>
		

                <echo message="拷贝配置文件、jar包准备打包"/>

                <!--拷贝集成域配置文件-->
                <copydir src="${project.tmp.path}/${project_name}/ejb-config" dest="${project.tmp.path}/${project_name}/ear/APP-INF/classes" forceoverwrite="true">
                    <include name="**/*.*" />
                </copydir>

                <!--拷贝所有平台包-->
                <copydir src="${project.appengine.lib.apache}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="**/*.jar"/>
                </copydir>
                
                <copydir src="${project.appengine.lib.appengine}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <copydir src="${project.appengine.lib.other}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <copydir src="${project.appengine.lib.runtime}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <copydir src="${project.appengine.lib.webframe}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <copydir src="${project.appengine.lib.events}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <copydir src="${project.appengine.lib.drools}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <copydir src="${project.appengine.lib.jrules}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <copydir src="${project.appengine.lib.test}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <copydir src="${project.common.lib.path}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar" />
                </copydir>

                <!--包含common的和各个工程域的,以及集成域本身-->
                <copydir src="${project.dest.dir}/${project_name}" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="${project_name}_ejb.jar"/>
                </copydir>

                <copydir src="${project.tmp.path}/all_dest_lib" dest="${project.tmp.path}/${project_name}/ear/APP-INF/lib" forceoverwrite="true">
                    <include name="*.jar"/> 
                    <exclude name="*ejb.jar"/>
                </copydir>


				<!--将配置文件打包成config.jar包-->
				<jar jarfile="${project.tmp.path}/${project_name}/ejb-config/${project_name}_config.jar">
					<fileset dir="${project.tmp.path}/${project_name}/ejb-config">
						<include name="**/*"/>
		      </fileset>
				</jar>
		
				<!-- 打成ear包 -->
				<jar jarfile="${project.dest.dir}/ear/${project_name}.ear">
					
					
                    <fileset dir="${project.runtime.config}/crm_ear/${project_name}">
                        <include name="META-INF/*.*"/>
                    </fileset>
 
					
                     <fileset dir="${project.tmp.path}/${project_name}/ear">
                        <include name="**/*"/>
                    </fileset>

                </jar>

							
    </target>

    <target name="usage" depends="init" description="usage">
        <echo message="crm create and deploy ant scripts"/>
        <echo message="************************************"/>
        <echo message="***** PLEASE BE CAREFUL USE!!! *****"/>
        <echo message="***** PLEASE BE CAREFUL USE!!! *****"/>
        <echo message="************************************"/>
    </target>

</project>
